#함수 더하기
'''def add(a,b):
    return a+b
print(add(3,7))'''

'''def add(a,b):
    print("함수의 결과 : " ,a+b)
add(3,7)'''

'''def add(a,b):
    print("함수의 결과 : ",a+b)
add(a=3,b=5)'''

'''def add(a,b):
    print(add(3,7))
print((lambda a,b:a+b)(3,7))'''


#입출력
'''n=int(input())
data = list(map(int,input().split())) #정말많이 쓰이는 함수
data.sort(reverse=True)
print(data)'''

'''n,m,k = map(int,input().split())
print(n,m,k)'''

#sys라이브러리 사용 (파이썬 input 함수가 동작속도가 느려서 시간초과 오답판정받을수있어 sys.stdin.readline()함수사용
'''import sys
data=sys.stdin.readline().rstrip() #뒤에 restrip()을 무조건 붙여야함 외우자!
print(data)

import sys
data = sys.stdin.readline().rstrip()
print(data)'''

#문자열과 상수는 더하기가 안된다
'''answer = 7
print("문자열" + str(answer) + "입니다")
print("문자열",str(answer),"입니다") # ,를 사용하면 의도치 않게 공백이 들어갈수도있다.'''

# 6. 주요 라이브러리 문법과 중요성
#(1)내장함수
'''result = sum([1,2,3,4,5])
print(result)'''

'''result = min(5,4,3,2) #가장 작은 수 
print(result)'''

'''result = max(5,4,3,2)
print(result) #제일큰수'''

#eval() 함수는 수학수식이 문자열 형식으로 들어오면 해당 수식 계산 결과 반환
'''result = eval("(3+5)*9")
print(result)'''

'''result = sorted([35,23,25,26,27]) #오름차순
print(result)

result = sorted([25,26,23,98,43],reverse=True) #내림차순
print(result)

result = sorted([('이순신',75) , ('홍길동' , 64) , ('구준표',67)],key=lambda x:[1],reverse=True) #두번째 수를 내림차순
print(result)

data = [2,5,1,3,9]
data.sort()
print(data)'''

#itertools - 반복되는 데이터를 처리하는 기능 (가장많이 쓰는 것은 permutations,combinations 이다)

from itertools import permutations #permutation 은 iterable 객체에서 r개의 데이터를 뽑아 일렬러 나열하는 모든 순열 계산
data = ['A','B','C']
result = list(permutations(data,3))
print(result)

from itertools import combinations #조합찾기
data = ['A' , 'B' , 'C']
result = list(combinations(data,2))
print(result)

from itertools import product #product 는 중복허용
data = ['A','B','C']
result = list(product(data,repeat=2))
print(result)

from itertools import combinations_with_replacement #r개의 데이터를 뽑아 순서를 고려하지않고 나열 다만 원소 중복해서 뽑음
data = ['A','B','C']
result = list(combinations_with_replacement(data,2))
print(result)



