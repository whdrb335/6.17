04 - 4 문자열, 리스트 , 딕셔너리와 관련된 기본 함수

리스트에 적용할 수 있는 기본 함수 : min() , max() , sum()

ex) numbers = [103,502,263,112]
min(numbers) = 103

reversed() 함수로 뒤집기
ex) list_a = [1,2,3,4,5]
reversed(list_a)

잠깐) 리스트 뒤집는 방법으로 "확장 슬라이싱" 이 있다.
ex) numbers = [1,2,3,4,5]
print(numbers) = [1,2,3,4,5]
print(numbers[::-1] = [5,4,3,2,1]

enumerate() 함수와 반복문 조합하기

딕셔너리의 items() 함수와 반복문 조합하기
ex)
example_dictionary = {
    "키A" : "값A",
    "키B" : "값B",
    "키C" : "값C"
}

print(example_dictionary.items()) = dict_items([('키A', '값A'), ('키B', '값B'), ('키C', '값C')])

리스트 내포

반복문을 사용한 리스트생성
ex)
array = []

for i in range(0,20,2):
    array.append(i * i)

print(array) = [0,4,16,36,64,100,144,196,,,,324]

이것을 어떻게 한줄로 할수 있을까???

array = [i * i for i in range(0,20,2)]

print(array)

리스트 이름 = [표현식 for 반복자 in 반복할 수 있는 것]

array = ["사과" , "자두" , "초콜릿" , "바나나" , "체리"]
output = [fruit for fruit in array if fruit != "초콜릿"]

print(output) = '사과' '자두' '바나나' '체리'

문자열의 join() 함수

문자열.join(문자열로 구성된 리스트)
ex) print("::".join(["1","2","3","4"]
 = 1::2::3::4
