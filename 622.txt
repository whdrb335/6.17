#heapqb - 다익스트라 최단경로 알고리즘을 포함해 다양한 알고리즘에서 우선순위 큐 기능을 구현
'''import heapq

def heapsort(iterable):
    h=[]
    result=[]
    #모든원소를 차례대로 힙에 삽입
    for value in iterable:
        heapq.heappush(h,value)
    #힙에 삽입된 모든 원소를 차례대로 꺼내어 담기
    for i in range(len(h)):
        result.append(heapq.heappop(h))
    return result

result = heapsort([1,3,5,7,9,2,4,6,8,0])
print(result)'''

#최대힙을 구현할때는 원소의 부호를 임시로 바꾸는 방식
'''import heapq
def heapsort(iterable):
    h = []
    result = []
    #모든 원소를 차례대로 힙에 삽임
    for value in iterable:
        heapq.heappush(h, -value) #부호를 임시로 바꾼다
    #힙에 삽임된 모든 원소를 차례대로 꺼내어 담기
    for i in range(len(h)):
        result.append(-heapq.heappop(h))
    return result
result = heapsort([1,3,5,7,9,2,4,6,8,0])
print(result)'''

#bisect - 이진탐색을 쉽게 구현할수 있도록 제공 , '정렬된 배열에서 특정한 원소를 찾아야할 때 매우 효과적으로 사용
'''from bisect import bisect_left,bisect_right

a=[1,2,4,4,8]
x = 4

print(bisect_left(a,x)) #정렬된 순서를 유지하면서 리스트a에 데이터 x를 삽입할 가장 왼쪽 인덱스를 찾는 메서드
print(bisect_right(a,x)) #정렬된 순서를 유지하면서 리스트 a에 데이터 x를 삽입할 가장 오른쪽 인덱스를 찾는 메서드'''

'''from bisect import bisect_left , bisect_right
#값이 [left_value , right_value] 인 데이터의 개수를 반환하는 함수
def count_by_range(a,left_value , right_value):
    right_index = bisect_right(a,right_value)
    left_index = bisect_left(a,left_value)
    return right_index - left_index

#리스트 선운
a = [1,2,3,3,3,3,4,4,8,9]

#값이 4인 데이터 개수 출력
print(count_by_range(a,4,4))

#값이 (-1,3]범위에 있는 데이터 개수 출력
print(count_by_range(a,-1,3))'''

'''from collections import deque

data = deque([2,3,4])
data.appendleft(1) #첫번째에 1추가
data.append(5) #마지막에 원소 5추가

print(data)
print(list(data))'''

'''from collections import Counter

counter = Counter(['red','blue','red','green','blue','blue'])

print(counter['blue']) #'blue' 가 등장한 횟수 출력
print(counter['green']) #'green' 이 등장한 횟수 출력
print(dict(counter)) #사전 자료형으로 반환'''

#mater 함수
'''import math
print(math.factorial(5)) # 5팩토리얼을출력

print(math.sqrt(7)) #7의 제곱은 출력

print(math.gcd(21,14)) #21과 14의 최대 공약수

print(math.pi) #pi출력
print(math.e) #자연상수 e출력 '''






