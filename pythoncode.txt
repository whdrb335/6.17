# #잔돈 1,260원을 거슬러주는 그리디
# n=1260
# count = 0
#
# coin_type = [500,100,50,10]
#
# for coin in coin_type:
#     count += n // coin #해당 화폐로 거슬러줄수 있는 동전의 개수 세기
#     n %= coin
#
# print(count)
#
# #시간복잡도는 코인의 타입이 몇개인지에 영향이지만 그 잔돈의 크기가 얼마나 큰지는 영향을 주지않는다!!

#코딩테스트 문제풀다가 문법 처음부터 해야되겠다는 생각에 바로 문법 보러옴

'''a=1000 # 정수 1000
print(a)

b = -7 # 정수 -7
print(b)

c = 0 # 정수 0
print(c)'''

'''a = 15.28 # 양의 실수
print(a)

b = -156.24 #음의 실수
print(b)

c = 5. #0은 생략
print(c)

d = -.7 #0은 생략'
print(d)'''

'''a = 1e9 #1000000000 을 1e9로 나타낸다 이게 안헷갈린다.
print(a)

b = 752.5
print(b)

c = 3.954
print(c)'''

'''a = 0.3 + 0.6 # 실수형을 저장하기 위해 4바이트 혹 8바이트라는 고정된 크기의 메모리를 할당해서 현재컴퓨터 시스템에서는 대체로 실수정보를 표현하는 정확도에 한계를 가진다

print(a)

if a == 0.9:
    print(true)
else:
    print(False)'''

#round(123.456,2 ) = 123.46이다. 세번째에서 반올림을해서 소수점 둘째자리 까지 표현한다

'''a = 0.3 + 0.6
print(round(a,4))

if round(a,4) == 0.9:
    print(True)
else:
    print(False)'''

#나머지연산자 = % , 몫 연산자 = //

'''a = 7
b = 3

#a 나누기 b
print(a / b)

#a를 b로 나눈 나머지
print(a % b)

#a를 b로 나눈 몫
print(a // b)'''

#거듭제곱 **
'''a = 5
b = 3

print(a ** b)'''

#리스트를 초기화 하는법
'''a = [1,2,3,4,5,6,7,8,9,10]
print(a)

print(a[4])

a = list() #리스트를 초기화햇당
print(a)'''

#코딩테스트에서는 주로 크기가 N인 1차원 리스트를 초기화해야하는데 다음방식이 편리하다

#크기가 N이고 모든값이 0인 1차원 리스트 초기화
'''n = 10
a = [0] * n
print(a)'''

#인덱스에 -1을 넣으면 마지막 원소가 출력된다 , 이러한 성질에 따라 인덱스 값을 바꿔줄수있다
'''a = [1,2,3,4,5,6,7,8,9]
print(a[-1]) #뒤에서 1번째 값출력
print(a[-3]) #뒤에서 3번째 값 출력
a[3] = 7
print(a)'''

#원속 가져오기 a[1:4] 라고 하면 인덱스는 0부터 출발이라 두번째원소부터 끝 인덱스 값 1을 뺀 인덱스값까지 출력된다

'''a = [1,2,3,4,5,6,7,8,9]
print(a[1:4]) #2,3,4출력'''

#리스트 컴프리헨션(대괄호안에 조건문과 반복문을 넣는 방식)
#0부터 19까지의 수 중에서 홀수만 포함하는 리스트
'''array = [i for i in range(20) if i % 2 == 1]
print(array)'''

#위에것을 보통 소스코드로 나타내면 이것이다.
'''array = []
for i in range(20):
    if i % 2 ==1:
        array.append(i)

        print(array)'''

#1부터 9까지의 제곱을 나타내는 컴프리헨션
'''array = [i*i for i in range(1,10)]
print(array)'''

#N X M 변수 초기화
'''n = 3
m = 4
array = [[0] * m for _ in range(n)] #언더바(_) 는 반복을 수행하되 반복을 위한 변수의 값을 무시하고자할때 언더바를 사용
print(array)'''

#리스트 관련 기타 메서드

# append() 사용법 : 변수명.append() 설명 : 리스트에 원소를 하나삽입할때 사용 , 시간복잡도 : O(1)
# sort() 사용법 : 변수명.sort() : 오름차순 , 변수명.sort(reverse=true) : 내림차순 , 시간복잡도 : O(NlogN)
# reverse() 사용법 : 변수명.reverse() , 설명: 리스트의 원소순서를 모두 뒤집는다. , 시간복잡도 : O(N)
# insert() 사용법 : 변수명.insert(삽입할 위치 인데스, 삽입할 값) , 설명 : 특정 인덱스위치에 원소를 삽입할때 사용 , 시간복잡도 : O(N)
# count() 사용법 : 변수명.count(특정값) , 설명: 리스트에서 특정한 값을 가지는 데이터의 개수를 셀때 사용 , 시간복잡도 : O(N)
# remove() 사용법 : 변수명.remove(특정 값) , 특정한 값을 갖는 원소를 제거하는데 값을 가진 원소가 여러개면 하나만 제거 , 시간복잡도 : O(N)

#1.[1,4,3] 기본리스트
'''a = [1,4,3]
print("기본 리스트",a)

#2.리스트에 원소 2 삽입
a.append(2)
print("리스트에 원소 2 삽입 : " , a)

#3.리스트 오름차순
a.sort()
print("리스트 오름차순 : ",a)
#4. 리스트 내림차순
a.sort(reverse = True)
print("리스트 내림차순" , a)

#5.리스트 원소 뒤집기
a.reverse()
print("리스트 원소 뒤집기 : ", a)

#6.특정 인덱스에 데이터 추가
a.insert(2,7)
print("리스트에 7 추가 :" ,a)

#7.특정 값인 데이터 개수 세기
print("데이터 3 세기" , a.count(3))

#8.특정 값 데이터 삭제
a.remove(3)
print("데이터 3 제거" , a)'''

# 여기서 insert , remove 함수는 시간복잡도가 O(N) 이기때문에 코딩테스트에서 남발하면 시간복잡도에서 떨어질수있다

#그래서 remove_set 을 쓴다
'''a = [1,2,3,4,5,6,7,8,9]
remove_set = {3,5}

result = [i for i in a if i not in remove_set]
print(result)'''

'''a = [1,2,3,4,5,6,7,8,9]
remove_set = {1,4,5,6}

result = [i for i in a if i not in remove_set]
print(result)'''

#문자열 자료형

#문자열 초기화

'''data = 'Hello World'
print(data)

data = "Don't you know \"python\"?" # \"문자\"을 넣으면 큰따옴표를 출력할수있다
print(data)'''

#문자열 더하기
'''a = 'Hello'
b = 'World'

print(a + "" +b)'''

#문자열 곱
'''a = 'String'
print(a*3)'''

#문자열 슬라이싱
'''A="ABCDEFG"
print(A[2:4])'''

'''data = dict()
data['사과'] = 'Apple'
data['바나나'] = 'Banana'
data['코코넛'] = 'Coconut'

print(data)'''

'''data = dict()
data['사과'] = 'Apple'
data['바나나'] = 'Banana'
data['코코넛'] = 'Coconut'

if '사과' in data:
    print("사과라는 값을 가지고 있습니다")'''


'''data = dict()
data['사과'] = 'Apple'
data['바나나'] = 'Banana'
data['코코넛'] = 'Coconut'

#키 데이터만 담은 리스트
key_list = data.keys()
#값 데이터만 담은 리스트
value_list = data.values()
print(key_list)
print(value_list)

#각 키에 따른 값을 하나씩 출력
for key in key_list:
    print(data[key])'''

#집합자료형

#집합 자료형 초기화 방법 1
'''data = set([1,1,2,3,4,4,5])
print(data)

#집합 자료형 초기화 방법 2
data = {1,1,2,3,3,4,5}
print(data)'''

#집합 자료형의 연산
'''a = set([1,2,3,4,5])
b = set([3,4,5,6,7])

print(a | b) # 합집합
print(a & b) # 교집합
print(a - b) # 차집합'''

#집합 자료형 관련 함수
'''data = set([1,2,3])
print(data)

#새로운 데이터 추가
data.add(4)
print(data)

#새로운 원소 여러개 추가
data.update(6,7)
print(data)

#원소 제거
data.remove(3)
print(data)'''

#조건문

'''score = 80

if score >= 90:
    print("A")
elif score >= 80: #if else 합친 elif 문을 쓴다.
    print("B")
elif score >= 70:
    print("C")
else:
    print("F") '''

'''score = 85

if score >= 70:   #이렇게 들여쓰기 된것은 같이 실행이 됩니다.
    print("성적이 70점 이상입니다")
    if score >=90:
        print('우수한 성적입니다')

else:
    print("더 열심히 하세요")

print("종료합니다") '''

#pass 기능

'''score = 85

if score >= 80:
    pass #pass 가 가능하다
else:
    print("열심히 하세용")

print("프로그램을 종료합니다")'''

'''score = 85
if score >= 80: result = "Success"
else: result = "Fail"
print(result) '''


#특정 원소의 값 제거
'''a = [1,2,3,3,4,5,5,6]
remove_set = {3,5}

result = []
for i in a:
    if i not in remove_set:
        result.append(i)

print(result)'''

#코드 줄이기
'''a = [1,2,3,3,4,5,5,6]
remove_set = {3,5}

result = [i for i in a if i not in remove_set]
print(result)'''


















